<script lang="ts">
	import { answeredQuestions, correctAnswers } from "$lib/stores";
	import Answer from "$lib/Answer.svelte";
	import Answers from "$lib/Answers.svelte";
</script>

# How well do you _really_ know JavaScript?

It's pretty well known that JavaScript has strange syntax and semantics.
Let's see how familiar you are with them! This quiz's format is mostly
inspired by [this Java quiz](https://goldenstack.net/blog/java_quiz).

---

## 1.

Consider the following code segment.

```javascript
function get(array) {
	return array.at('start');
}
```

What is the result of calling the `get` function with the
array `['first', 'second', 'third']`?

<Answers>
<Answer correct>

`'first'`

</Answer>
<Answer>

`'second'`

</Answer>
<Answer>

`undefined`

</Answer>
<Answer>

A `TypeError` is thrown because `at` is not an array method.

</Answer>
<Answer>

A `TypeError` is thrown because the `at` method takes an integer argument.

</Answer>
</Answers>

---

## 2.

Consider the following code segment.

```js
const a = 'üëã';
const b = 'üëãüèΩ';
console.log(a.length + b.length);
```

What value will be printed to the console when the code is executed?

<Answers>
<Answer>

`2`

</Answer>
<Answer>

`3`

</Answer>
<Answer>

`4`

</Answer>
<Answer>

`5`

</Answer>
<Answer correct>

`6`

</Answer>
</Answers>

---

## 3.

Which of the following is **not** always a reserved word?

<Answers>
<Answer correct>

`await`

</Answer>
<Answer>

`class`

</Answer>
<Answer>

`debugger`

</Answer>
<Answer>

`enum`

</Answer>
<Answer>

`void`

</Answer>
</Answers>

---

## 4.

Consider the following code segment.

```js
Array.prototype.push('hello');

console.log(Array.prototype.length);
```

What value will be printed to the console when the code is executed?

<Answers>
<Answer>

`0`

</Answer>
<Answer correct>

`1`

</Answer>
<Answer>

`undefined`

</Answer>
<Answer>

A `TypeError` is thrown because `push` does not exist on `Array.prototype`.

</Answer>
<Answer>

A `TypeError` is thrown because the reference to `this` when `push` is called is `undefined`.

</Answer>
</Answers>

---

## 5.

Which of the following code segments are syntactically valid (i.e., does not throw a `SyntaxError`)?

1. `x++y`
2. `x+++y`
3. `x+++++y`

<Answers>
<Answer>

**I** only

</Answer>
<Answer correct>

**II** only

</Answer>
<Answer>

**I** and **II** only

</Answer>
<Answer>

**I** and **III** only

</Answer>
<Answer>

None of the above

</Answer>
</Answers>

---

## 6.

Consider the following code segment.

```js
const history = [];

function tag(literals, ...values) {
	history.push(literals);
	return values;
}

function useTag() {
	return tag`Hello, ${'world'}!`;
}

const a = useTag() === useTag();
const b = history[0] === history[1];
const c = history[0].raw.length === 1;
```

Of the values `a`, `b`, and `c`, which are `true`?

<Answers>
<Answer>

`a` only

</Answer>
<Answer correct>

`b` only

</Answer>
<Answer>

`a` and `b` only

</Answer>
<Answer>

`a` and `c` only

</Answer>
<Answer>

None of the above

</Answer>
</Answers>

---

## 7.

What is the result when the expression `parseFloat('Infinity') === Number.POSITIVE_INFINITY` is evaluated?

<Answers>
<Answer correct>

`true`

</Answer>
<Answer>

`false`, because `parseFloat('Infinity')` returns `Number.POSITIVE_INFINITY`, which is not considered equal to itself.

</Answer>
<Answer>

`false`, because `parseFloat('Infinity')` returns `NaN` because `'Infinity'` is not a valid number.

</Answer>
<Answer>

`false`, because `parseFloat('Infinity')` returns `Infinity`, which is not considered equal to `Number.POSITIVE_INFINITY`.

</Answer>
<Answer>

A `TypeError` is thrown because `parseFloat` only accepts finite numbers.

</Answer>
</Answers>

---

## 8.

Consider the following code segment.

```js
function saferDivide(a, b) {
	try {
		return a / b;
	} finally {
		return 1;
	}
}

const x = saferDivide(1, 0);
const y = saferDivide(4, 2);

console.log(x + y);
```

What is the value printed to the console when the code is executed?

<Answers>
<Answer correct>

`2`

</Answer>
<Answer>

`3`

</Answer>
<Answer>

`Infinity`

</Answer>
<Answer>

`NaN`

</Answer>
<Answer>

A `SyntaxError` is thrown because `try` blocks must have a corresponding `catch` block.

</Answer>
</Answers>

---

## 9.

Consider the following code segment.

```js
// prettier-ignore
const wrap = value => { value };
const array = [1, 2, 3].map(wrap);
const items = array.toString();
```

What is the value of `items`?

<Answers>
<Answer correct>

`',,'`

</Answer>
<Answer>

`'1,2,3'`

</Answer>
<Answer>

`'[object Array]'`

</Answer>
<Answer>

`'undefined,undefined,undefined'`

</Answer>
<Answer>

`'[object Object],[object Object],[object Object]'`

</Answer>
</Answers>

---

## 10.

Consider the following code segment.

```js
let foo = { n: 1 };
let bar = foo;
let baz = foo;
foo.x = foo = { n: 2 };
bar.y = foo.y = bar = { n: 3 };
```

What are the values of `foo`, `bar`, and `baz` after the code is executed? Assume that `‚âà` means "deeply equal" and that self-reference is circular.

<Answers>
<Answer correct>

```js
foo = { n: 2, y: { n: 3 } };
bar = { n: 3 };
baz = {
	n: 1,
	x: { n: 2, y: { n: 3 } },
	y: { n: 3 }
};
```

</Answer>
<Answer>

```js
foo = { n: 2, x: foo, y: bar };
bar = { n: 3, y: bar };
baz = { n: 1 };
```

</Answer>
<Answer>

```js
foo = { n: 2, y: undefined };
bar = { n: 3 };
baz = {
	n: 1,
	x: { n: 2, y: undefined },
	y: { n: 3 }
};
```

</Answer>
<Answer>

```js
foo = { n: 2 };
bar = { n: 3, y: { n: 3 } };
baz = {
	n: 1,
	x: { n: 2 },
	y: { n: 3 }
};
```

</Answer>
<Answer>

A `ReferenceError` is thrown because `foo` is reassigned before it is accessed.

</Answer>
</Answers>

---

## 11.

Consider the following code segment.

```js
function f() {
	return f;
}
console.log(new f() instanceof f);
```

What is the value printed to the console when the code is executed?

<Answers>
<Answer>

`true`

</Answer>
<Answer correct>

`false`

</Answer>
<Answer>

A `TypeError` is thrown because `f` is not a constructor.

</Answer>
<Answer>

A `TypeError` is thrown because an `instanceof` check cannot be performed on a function.

</Answer>
<Answer>

A `RangeError` or `InternalError` (depending on the JavaScript engine) is thrown due to the maximum call stack size being exceeded.

</Answer>
</Answers>

---

## 12.

Which of the following code segments will run and print `'Hello world!'` to the console without error?

1. ```js
   // prettier-ignore
   (new class {
   	constructor() {
   		console.log('Hello world!');
   	}
   })();
   ```
2. ```js
   // prettier-ignore
   (new class {
   	class() {
   		console.log('Hello world!');
   	}
   }).class();
   ```
3. ```js
   // prettier-ignore
   (new class extends null {
   	constructor() {
   		console.log('Hello world!');
   		return Object.create(null);
   	}
   })();
   ```

<Answers>
<Answer>

**I** only

</Answer>
<Answer>

**II** only

</Answer>
<Answer>

**I** and **II** only

</Answer>
<Answer>

**I** and **III** only

</Answer>
<Answer correct>

**I**, **II**, and **III**

</Answer>
</Answers>

---

## 13.

What is returned when the expression `'x'.padStart(4, Number)` is evaluated?

<Answers>
<Answer>

`'000x'`

</Answer>
<Answer>

`'NaNx'`

</Answer>
<Answer>

`'Numx'`

</Answer>
<Answer>

`'Numberx'`

</Answer>
<Answer correct>

None of the above

</Answer>
</Answers>

---

## 14.

Consider the following code segment.

```js
const buffer = new ArrayBuffer([1, 2, 3, 4]);
const array = new Float32Array(buffer);

for (let i = 0; i < array.length; i++) {
	array[i] = array[i] * array[i];
}

let sum = 0;

for (let i = 0; i < array.length; i++) {
	sum += array[i];
}
```

What is the value of `sum` after the code is executed?

<Answers>
<Answer correct>

`0`

</Answer>
<Answer>

`10`

</Answer>
<Answer>

`30`

</Answer>
<Answer>

A `TypeError` is thrown because `ArrayBuffer` does not accept an array as an argument.

</Answer>
<Answer>

None of the above.

</Answer>
</Answers>

---

## 15.

Consider the following code segment.

```js
function set(value = 'hello') {
	'use strict';
	newValue = values;
}

set();
```

What is the result of calling the `set` function?

<Answers>
<Answer>

The function executes successfully, creating a local variable `newValue` set to `'hello'`.

</Answer>
<Answer>

The function executes successfully, but `newValue` remains `undefined` due to strict mode preventing implicit global variable creation.

</Answer>
<Answer>

`newValue` is implicitly created on the global object and set to `'hello'`.

</Answer>
<Answer>

A `ReferenceError` is thrown because `newValue` is not defined, and strict mode does not allow implicit global variable creation.

</Answer>
<Answer correct>

A `SyntaxError` is thrown because strict mode is not allowed in a function with a default parameter.

</Answer>
</Answers>

---

## 16.

Which of the following expressions is syntactically valid?

1. `false.true = 'maybe'`
2. `4.length = 5`
3. `'it'.is = /far/`

<Answers>
<Answer>

**I** only

</Answer>
<Answer>

**II** only

</Answer>
<Answer>

**III** only

</Answer>
<Answer>

**I** and **II** only

</Answer>
<Answer correct>

**I** and **III** only

</Answer>
</Answers>

---

## 17.

---

## 18.

---

## 19.

---

## 20.

---

## 21.

---

## 22.

---

## 23.

---

## 24.

---

## 25.

---

## Results

You got **{$correctAnswers}** out of **{$answeredQuestions}** questions
{#if $answeredQuestions < 25}
with **{25 - $answeredQuestions}** unanswered{/if}.

```

```
