<script lang="ts">
	import { answeredQuestions, correctAnswers } from "$lib/stores";
	import Answer from "$lib/Answer.svelte";
	import Answers from "$lib/Answers.svelte";
	import Explanation from "$lib/Explanation.svelte";
	import ThemeSelector from "$lib/ThemeSelector.svelte";
</script>

# How well do you _really_ know JavaScript?

<ThemeSelector />

It's pretty well known that JavaScript has strange syntax and semantics. Let's see how familiar you are with them! This quiz's format is mostly inspired by [this Java quiz](https://goldenstack.net/blog/java_quiz).

Assume that code segments provided are executed in an isolated, modern ECMAScript environment.

---

## 1.

Consider the following code segment.

```javascript
function get(array) {
	return array.at('start');
}
```

What is the result of calling the `get` function with the array `['first', 'second', 'third']`?

<Answers>
<Answer correct>

`'first'`

</Answer>
<Answer>

`'second'`

</Answer>
<Answer>

`undefined`

</Answer>
<Answer>

A `TypeError` is thrown because `at` is not an array method.

</Answer>
<Answer>

A `TypeError` is thrown because the `at` method takes an integer argument.

</Answer>
<Explanation>

The `at` method is a new method [introduced in ECMAScript 2022](https://github.com/tc39/proposal-relative-indexing-method) that allows you to access an element in an array by its index relative to the either the start or end of the array.

Because [the `at` method](https://tc39.es/ecma262/#sec-array.prototype.at) should take an index, it calls the internal function `ToIntegerOrInfinity` on the argument. `ToIntegerOrInfinity` first converts the argument to a number, and if that number is `NaN`, it converts it to `0`.

So `array.at('start')` is equivalent to `array.at(0)`, which returns `'first'`.

</Explanation>
</Answers>

---

## 2.

Consider the following code segment.

```js
const a = 'üëã';
const b = 'üëãüèæ';
console.log(a.length + b.length);
```

What value will be printed to the console when the code is executed?

<Answers>
<Answer>

`2`

</Answer>
<Answer>

`3`

</Answer>
<Answer>

`4`

</Answer>
<Answer>

`5`

</Answer>
<Answer correct>

`6`

</Answer>
<Explanation>

This is more of a question about Unicode than JavaScript itself. The `length` property of a string returns the number of UTF-16 code units in the string, so we need to know how many code points are in the two emojis.

The Unicode code point for `'üëã'` is `U+1F44B`, which is represented by two UTF-16 code units, `0xD83D 0xDC4B`.

`'üëãüèæ'` is represented by the code point for the waving hand `U+1F44B` plus the skin color modifier `U+1F3FE`, taking up four UTF-16 code units, `0xD83D 0xDC4B 0xD83C 0xDFFE`.

</Explanation>
</Answers>

---

## 3.

Which of the following is **not** always a reserved word?

<Answers>
<Answer correct>

`await`

</Answer>
<Answer>

`class`

</Answer>
<Answer>

`debugger`

</Answer>
<Answer>

`enum`

</Answer>
<Answer>

`void`

</Answer>
<Explanation>

`await` is a reserved word in strict mode and modules, but it is not a reserved word in non-strict mode or global, non-module scope. `await` is a contextual keyword, meaning its status as a reserved word depends on the context in which it is used.

One reason for this is backwards compatibility. `await` was introduced in 2017, and making it a reserved word in all contexts would break existing code that uses `await` as an identifier. The rest of the keywords have almost always been reserved.

</Explanation>
</Answers>

---

## 4.

Consider the following code segment.

```js
Array.prototype.push('hello');

console.log(Array.prototype.length);
```

What value will be printed to the console when the code is executed?

<Answers>
<Answer>

`0`

</Answer>
<Answer correct>

`1`

</Answer>
<Answer>

`undefined`

</Answer>
<Answer>

A `TypeError` is thrown because `push` does not exist on `Array.prototype`.

</Answer>
<Answer>

A `TypeError` is thrown because the reference to `this` when `push` is called is `undefined`.

</Answer>
<Explanation>

`Array.prototype` is an array object itself. When we call `push('hello')` on `Array.prototype`, we're adding an element to this array.

The `length` property of an array is automatically updated when elements are added or removed. After pushing `'hello'` to `Array.prototype`, its length becomes `1`.

</Explanation>
</Answers>

---

## 5.

Which of the following code segments are syntactically valid (i.e., does not throw a `SyntaxError`)?

1. `x++y`
2. `x+++y`
3. `x+++++y`

<Answers>
<Answer>

**I** only

</Answer>
<Answer correct>

**II** only

</Answer>
<Answer>

**I** and **II** only

</Answer>
<Answer>

**I** and **III** only

</Answer>
<Answer>

None of the above

</Answer>
<Explanation>

1. `x++y` is parsed as `(x++) y` with the increment operator `++`. This is invalid.
2. `x+++y` is parsed as `(x++) + y`. The postfix increment is applied to `x`, then the result is added to `y`.
3. `x+++++y` is parsed as `(x++)++ + y`, but you can't apply `++` to the result of `x++`, a number.

</Explanation>
</Answers>

---

## 6.

Consider the following code segment.

```js
const history = [];

function tag(literals, ...values) {
	history.push(literals);
	return values;
}

function useTag() {
	return tag`Hello, ${'world'}!`;
}

const a = useTag() === useTag();
const b = history[0] === history[1];
const c = history[0].raw.length === 1;
```

Of the values `a`, `b`, and `c`, which are `true`?

<Answers>
<Answer>

`a` only

</Answer>
<Answer correct>

`b` only

</Answer>
<Answer>

`a` and `b` only

</Answer>
<Answer>

`a` and `c` only

</Answer>
<Answer>

None of the above

</Answer>
<Explanation>

A [tagged template function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates) receives the literal parts of the template as its first argument as an array and the interpolated values as subsequent arguments. The `raw` property of the literals array contains the raw string values.

`a` is `false` because the `values` will be a new array each time a tagged template literal is called.

`b` is `true` because the literals in a tagged template literal are cached and reused, so `history[0]` and `history[1]` are the same array.

`c` is `false` because the literals array has two elements: `['Hello, ', '!']`.

</Explanation>
</Answers>

---

## 7.

What is the result when the expression `parseFloat('Infinity') === Number.POSITIVE_INFINITY` is evaluated?

<Answers>
<Answer correct>

`true`

</Answer>
<Answer>

`false`, because `parseFloat('Infinity')` returns `Number.POSITIVE_INFINITY`, which is not considered equal to itself.

</Answer>
<Answer>

`false`, because `parseFloat('Infinity')` returns `NaN` because `'Infinity'` is not a valid number.

</Answer>
<Answer>

`false`, because `parseFloat('Infinity')` returns `Infinity`, which is not considered equal to `Number.POSITIVE_INFINITY`.

</Answer>
<Answer>

A `TypeError` is thrown because `parseFloat` only accepts finite numbers.

</Answer>
<Explanation>

`parseFloat('Infinity')` does indeed parse the string `'Infinity'` and returns the same value as `Number.POSITIVE_INFINITY` value.

JavaScript fortunately does have single representation for positive infinity.

</Explanation>
</Answers>

---

## 8.

Consider the following code segment.

```js
function saferDivide(a, b) {
	try {
		return a / b;
	} finally {
		return 1;
	}
}

const x = saferDivide(1, 0);
const y = saferDivide(4, 2);

console.log(x + y);
```

What is the value printed to the console when the code is executed?

<Answers>
<Answer correct>

`2`

</Answer>
<Answer>

`3`

</Answer>
<Answer>

`Infinity`

</Answer>
<Answer>

`NaN`

</Answer>
<Answer>

A `SyntaxError` is thrown because `try` blocks must have a corresponding `catch` block.

</Answer>
<Explanation>

This question applies to most languages that have `try`/`finally` blocks.

In a `try`/`finally` structure, the `finally` block must always execute, even if the function is returned from. If `return` is used in `finally`, it overrides the return value from the `try` block.

Regardless of the value of `a / b`, the function always returns `1`, so the sum is `2`.

</Explanation>
</Answers>

---

## 9.

Consider the following code segment.

```js
// prettier-ignore
const wrap = value => { value };
const array = [1, 2, 3].map(wrap);
const items = array.toString();
```

What is the value of `items` after the code is executed?

<Answers>
<Answer correct>

`',,'`

</Answer>
<Answer>

`'1,2,3'`

</Answer>
<Answer>

`'[object Array]'`

</Answer>
<Answer>

`'undefined,undefined,undefined'`

</Answer>
<Answer>

`'[object Object],[object Object],[object Object]'`

</Answer>
<Explanation>

The `wrap` function is defined with curly braces `{}`. In arrow functions, curly braces define a function body, not an object literal, so this is equivalent to the following.

```js
const wrap = value => {
	value;
};
```

Without a `return` statement, the function implicitly returns `undefined`, so `[1, 2, 3].map(wrap)` results in `[undefined, undefined, undefined]`.

When arrays are converted to strings, they implicitly call the `Array#join` function, which has a default argument of `','`. [In the `join` function](https://tc39.es/ecma262/#sec-array.prototype.join), `undefined` and `null` values are not shown, but the separators are still added, giving `',,'`.

</Explanation>
</Answers>

---

## 10.

Consider the following code segment.

```js
let foo = { n: 1 };
let bar = foo;
foo.x = foo = { n: 2 };
```

What are the values of `foo` and `bar` after the code is executed? Assume that `‚âà` indicates that the objects are structurally equivalent and that self-references are circular.

<Answers>
<Answer correct>

```js
foo ‚âà { n: 2 }
bar ‚âà { n: 1, x: { n: 2 } }
```

</Answer>
<Answer>

```js
foo ‚âà { n: 2, x: foo }
bar ‚âà { n: 1 }
```

</Answer>
<Answer>

```js
foo ‚âà { n: 2 }
bar ‚âà { n: 1 }
```

</Answer>
<Answer>

```js
foo ‚âà bar ‚âà { n: 2, x: foo }
```

</Answer>
<Answer>

A `ReferenceError` is thrown because `foo` is reassigned before it is accessed.

</Answer>
<Explanation>

In the expression `foo.x = foo = { n: 2 }`, the left-hand side `foo.x` is evaluated first, creating a property `x` on the original object. Then `foo` is reassigned to a new object `{ n: 2 }`, but the `x` property is set on the original object that `bar` still references.

After execution, `foo` references the new object `{ n: 2 }` and `bar` references the original object, which now looks like `{ n: 1, x: { n: 2 } }`.

</Explanation>
</Answers>

---

## 11.

Consider the following code segment.

```js
function f() {
	return f;
}
console.log(new f() instanceof f);
```

What is the value printed to the console when the code is executed?

<Answers>
<Answer>

`true`

</Answer>
<Answer correct>

`false`

</Answer>
<Answer>

A `TypeError` is thrown because `f` is not a constructor.

</Answer>
<Answer>

A `TypeError` is thrown because an `instanceof` check cannot be performed on a function.

</Answer>
<Answer>

A `RangeError` or `InternalError` (depending on the JavaScript engine) is thrown due to the maximum call stack size being exceeded.

</Answer>
<Explanation>

When `new f()` is called, `new f()` returns `f` rather than the created object.

The `instanceof` operator checks if the prototype chain of the left operand includes the `prototype` property of the right operand. In this case, the left becomes `f` rather than the object created by `new`. A function is not an instance of itself, so `false` is printed.

</Explanation>
</Answers>

---

## 12.

Which of the following code segments will run and print `'Hello world!'` to the console without error?

1. ```js
   // prettier-ignore
   (new class {
   	constructor() {
   		console.log('Hello world!');
   		return Object.create(null);
   	}
   }());
   ```
2. ```js
   // prettier-ignore
   (new class {
   	class() {
   		console.log('Hello world!');
   	}
   }).class();
   ```
3. ```js
   // prettier-ignore
   (new class extends null {
   	constructor() {
   		console.log('Hello world!');
   		return Object.create(null);
   	}
   }());
   ```

<Answers>
<Answer>

**I** only

</Answer>
<Answer>

**II** only

</Answer>
<Answer>

**I** and **II** only

</Answer>
<Answer>

**I** and **III** only

</Answer>
<Answer correct>

**I**, **II**, and **III**

</Answer>
<Explanation>

1. The constructor returns an object which becomes the result of the `new` expression instead of the newly created instance without errors.
2. `class` is a valid method name.
3. A class can extend `null`. This would normally throw when constructed, but the behavior is overriden if The constructor can still return an object to override the instance.

</Explanation>
</Answers>

---

## 13.

What is returned when the expression `'x'.padStart(4, Number)` is evaluated?

<Answers>
<Answer>

`'000x'`

</Answer>
<Answer>

`'NaNx'`

</Answer>
<Answer>

`'Numx'`

</Answer>
<Answer>

`'[obx'`

</Answer>
<Answer correct>

None of the above

</Answer>
<Explanation>

When `padStart` is called, it first converts the padding to a string. `String(Number)` results in `'function Number() { [native code] }'`, so the expression evaluates to `'funx'`.

</Explanation>
</Answers>

---

## 14.

Consider the following code segment.

```js
const buffer = new ArrayBuffer([1, 2, 3, 4]);
const array = new Float32Array(buffer);

for (let i = 0; i < array.length; i++) {
	array[i] = array[i] * array[i];
}

let sum = 0;

for (let i = 0; i < array.length; i++) {
	sum += array[i];
}
```

What is the value of `sum` after the code is executed?

<Answers>
<Answer correct>

`0`

</Answer>
<Answer>

`10`

</Answer>
<Answer>

`30`

</Answer>
<Answer>

A `TypeError` is thrown because `ArrayBuffer` does not accept an array as an argument.

</Answer>
<Answer>

None of the above.

</Answer>
<Explanation>

`new ArrayBuffer([1, 2, 3, 4])` does not create a buffer with those values. [The `ArrayBuffer` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer) only takes a size in bytes, so it [tries to convert](https://tc39.es/ecma262/#sec-arraybuffer-length) `[1, 2, 3, 4]` to a non-negative integer. Because this is first converted to `NaN`, it initializes the `ArrayBuffer` with a size of 0.

This gets passed to the `Float32Array` constructor, which creates an array of length 0. The loops don't do anything, so `sum` remains `0`.

</Explanation>
</Answers>

---

## 15.

Consider the following code segment.

```js
function set(value = 'hello') {
	'use strict';
	newValue = value;
}

set();
```

What is the result of calling the `set` function?

<Answers>
<Answer>

The function executes successfully, creating a local variable `newValue` set to `'hello'`.

</Answer>
<Answer>

The function executes successfully, but `newValue` remains `undefined` due to strict mode preventing implicit global variable creation.

</Answer>
<Answer>

`newValue` is implicitly created on the global object and set to `'hello'`.

</Answer>
<Answer>

A `ReferenceError` is thrown because `newValue` is not defined, and strict mode does not allow implicit global variable creation.

</Answer>
<Answer correct>

A `SyntaxError` is thrown because the `'use strict'` directive is not allowed in a function with a default parameter.

</Answer>
<Explanation>

The [`'use strict'` directive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#strict_mode_for_functions) can only be applied to the body of functions with simple parameters, i.e. without rest, default, or destructured parameters. This is a syntax error.

</Explanation>
</Answers>

---

## 16.

Which of the following expressions is syntactically valid?

1. `false.true = 'maybe'`
2. `4.length = 5`
3. `'it'.is = /far/`

<Answers>
<Answer>

**I** only

</Answer>
<Answer>

**II** only

</Answer>
<Answer>

**III** only

</Answer>
<Answer>

**I** and **II** only

</Answer>
<Answer correct>

**I** and **III** only

</Answer>
<Explanation>

1. `false.true = 'maybe'` attempts to create a property `'true'` on the `false`. This won't throw a syntax error, but will lead to a type error because this assignment is not possible.
2. `4.length` will throw a syntax error because `4.` will be treated as a literal number rather than the dot operator. Replacing it with `4..length` would be syntactically valid.
3. Like case I, `'it'.is = /far/` attempts to create a property `'is'` on the string `'it'`, throwing a type error at runtime but not a syntax error.

</Explanation>
</Answers>

---

## 17.

Consider the following code segment.

```js
class Polygon {
	constructor() {
		this.name = 'Polygon';
	}
}

class Rectangle {
	constructor() {
		this.name = 'Rectangle';
	}
}

class Square extends Polygon {
	constructor() {
		super();
	}
}

Object.setPrototypeOf(Square, Rectangle);

const square = new Square();

console.log(square instanceof Polygon);
console.log(square instanceof Rectangle);
console.log(square.name);
```

What three values are printed to the console when the code is executed?

<Answers>
<Answer correct>

`true false 'Rectangle'`

</Answer>
<Answer>

`false true 'Rectangle'`

</Answer>
<Answer>

`true false 'Polygon'`

</Answer>
<Answer>

`false true 'Polygon'`

</Answer>
<Answer>

None of the above

</Answer>
<Explanation>

`instanceof` checks the prototype chain of the left operand. `square` is an instance of `Polygon` because we didn't change the prototype of `Square.prototype`, so the prototype chain of `square` is still `square` &rarr; `Square.prototype` &rarr; `Polygon.prototype`.

On the other hand, the `Square`'s prototype is set to `Rectangle`, so `super()` in the `Square` constructor calls the `Rectangle` constructor, setting `square.name` to `'Rectangle'`.

See [this MDN article](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor#calling_super_in_a_constructor_bound_to_a_different_prototype) for more.

</Explanation>
</Answers>

---

## 18.

Consider the following code segment.

```js
class MyClass {
	static a = console.log('A');
	static {
		console.log('B');
	}
	static b = console.log('C');
	static {
		console.log('D');
	}
}
```

What is the order in which the letters `A`, `B`, `C`, and `D` are printed to the console when the code is executed?

<Answers>
<Answer correct>

`A B C D`

</Answer>
<Answer>

`A C B D`

</Answer>
<Answer>

`B D A C`

</Answer>
<Answer>

`B A D C`

</Answer>
<Answer>

A `SyntaxError` is thrown because a class may only have one static initializer block.

</Answer>
<Explanation>

Static fields and blocks are executed in the order they appear in the class definition, so the order is simply `A B C D`.

</Explanation>
</Answers>

---

## 19.

Consider the following code segment.

```js
const { proxy, revoke } = Proxy.revocable(['Hello!'], {
	get: (target, prop) => prop.toString()
});

revoke();

console.log(`${proxy}`);
```

What is printed to the console when the code is executed?

<Answers>
<Answer>

`1`

</Answer>
<Answer>

`'Hello!'`

</Answer>
<Answer>

`'[object Array]'`

</Answer>
<Answer>

`'Symbol(Symbol.toPrimitive)'`

</Answer>
<Answer correct>

A `TypeError` is thrown because a revoked proxy cannot be coerced to a string.

</Answer>
<Explanation>

When a revocable proxy is `revoke` d, any operation on the proxy will throw a `TypeError`.

In this case, the [string interpolation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) attempts to convert the proxy to a string, which involves accessing `proxy[Symbol.toPrimitive]`. Since the proxy has been revoked, this operation throws a TypeError.

</Explanation>
</Answers>

---

## 20.

Consider the following code segment.

```js
const obj = {};
obj['b'] = 1;
obj['1'] = 2;
obj['a'] = 3;
const keys = Object.keys(obj);
```

What is the value of `keys` after the code is executed?

<Answers>
<Answer>

`['1', 'a', 'b']`

</Answer>
<Answer>

`['b', '1', 'a']`

</Answer>
<Answer>

`[1, 'a', 'b']`

</Answer>
<Answer correct>

`['1', 'b', 'a']`

</Answer>
<Answer>

The answer is dependent on the JavaScript engine because the specification does not guarantee a deterministic order.

</Answer>
<Explanation>

The `Object.keys` method returns keys in the same order as a [`for...in` loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in#description), which is consistent.

The order is all non-negative integer keys (even though they are strings) in ascending order by value, then the remaining string keys in insertion order.

</Explanation>
</Answers>

---

## 21.

Consider the following code segment.

```js
const numbers = new Uint8Array([11, 1, 2]);
const sorted = numbers.sort();
```

What is the value of `sorted` after the code is executed?

<Answers>
<Answer>

`Array [1, 2, 11]`

</Answer>
<Answer correct>

`Uint8Array [1, 2, 11]`

</Answer>
<Answer>

`Array [1, 11, 2]`

</Answer>
<Answer>

`Uint8Array [1, 11, 2]`

</Answer>
<Answer>

A `TypeError` is thrown because `Uint8Array` does not have a `sort` method.

</Answer>
<Explanation>

Although the `Array` sort method is based on string order by default, the [`TypedArray` sort method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort) is based on numeric order. The `Uint8Array` is sorted in ascending order, so `sorted` is `Uint8Array [1, 2, 11]`.

</Explanation>
</Answers>

---

## 22.

What is the result of evaluating the expression `&grave;${import.meta}&grave;` in a JavaScript module?

<Answers>
<Answer>

`'[object Object]'`

</Answer>
<Answer>

`'undefined'`

</Answer>
<Answer correct>

A `TypeError` is thrown because `import.meta` cannot be coerced to a string.

</Answer>
<Answer>

A `SyntaxError` is thrown because `import.meta` cannot be used in a template literal.

</Answer>
<Answer>

Whether `import.meta` may be stringified is dependent on the JavaScript engine.

</Answer>
<Explanation>

The [`import.meta` object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta) has a `null` prototype, so it has no `[@@toPrimitive]()`, `toString()`, or `valueOf()` methods available to coerce it to a string.

The same error occurs when trying to coerce `Object.create(null)` to a string.

</Explanation>
</Answers>

---

## 23.

What are the values of `a`, `b`, and `c` after the following code is executed?

```js
const a = Number();
const b = Number(undefined);
const c = Number(null);
```

<Answers>
<Answer>

`0 0 0`

</Answer>
<Answer>

`NaN NaN 0`

</Answer>
<Answer>

`0 0 NaN`

</Answer>
<Answer correct>

`0 NaN 0`

</Answer>
<Answer>

A `TypeError` is thrown because `Number` does not accept `undefined` or `null` as arguments.

</Answer>
<Explanation>

[The `Number` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number) is defined such that it coerces its argument to a number. `Number()` returns `0` as a default value. `Number(undefined)` and `Number(null)` follow the [normal coercion rules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), resulting in `NaN` and `0` respectively.

</Explanation>
</Answers>

---

## 24.

Which of the following `import` statements is syntactically valid, assuming that all referenced modules and exports exist?

<Answers>
<Answer>

`import * from 'foo.js'`

</Answer>
<Answer>

`import { * as bar } from 'foo.js'`

</Answer>
<Answer>

`import default from 'foo.js'`

</Answer>
<Answer>

`import { default } from 'foo.js'`

</Answer>
<Answer correct>

`import { "default" as bar } from 'foo.js'`

</Answer>
<Explanation>

`import * from 'foo.js'` is invalid because JavaScript does not allow wildcard imports without namespacing.

`import { * as bar } from 'foo.js'` is invalid because namespace imports do not have curly braces.

`import default from 'foo.js'` and `import { default } from 'foo.js'` are invalid because `default` is a reserved word and cannot be used as an identifier.

`import { "default" as bar } from 'foo.js'` is valid! It's equivalent to `import { default as bar } from 'foo.js'`.

You can export and import from modules [`as "some string"`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#forms_of_import_declarations) to use an arbitrary name for the imported/exported value. Interestingly, most LSPs and parsers don't recognize this syntax, so Prettier fails and your editor might show an error even though the code runs fine.

</Explanation>
</Answers>

---

## 25.

What is the result of evaluating the expression `Math.toString()`?

<Answers>
<Answer>

`'Math'`

</Answer>
<Answer correct>

`'[object Math]'`

</Answer>
<Answer>

`'[object Object]'`

</Answer>
<Answer>

`'function Math() { [native code] }'`

</Answer>
<Answer>

A `TypeError` is thrown because the global `Math` object does not have a `toString` method.

</Answer>
<Explanation>

The `Math` object is a built-in object that has a [`Symbol.toStringTag` property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) set to `'Math'`. When this object is coerced to a string, the `Object.prototype.toString` method is called, reading the `Math[@@toStringTag]` property and returning `'[object Math]'`.

</Explanation>
</Answers>

---

## Results

You got **{$correctAnswers}** out of **{$answeredQuestions}** questions!
{#if $answeredQuestions < 25}
There are **{25 - $answeredQuestions}** questions _unanswered_.
{/if}
üéâ

This quiz was pretty fun to make. I tried to avoid a lot of the classic clich√©s like `0.1 + 0.2 === 0.3` and `[] + [] === ''`, and went a bit deeper into some language features.

If you have any questions, suggestions, or feedback, you can reach out to me on Discord at `ilotani` or leave an issue on this site's [GitHub repository](https://github.com/cubedhuang/js-quiz).
